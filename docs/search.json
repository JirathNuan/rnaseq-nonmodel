[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Transcriptome Data Analysis in Non-model Organisms",
    "section": "",
    "text": "Preface\nWelcome to the book of Transcriptome Data Analysis in Non-Model Organisms.\n\n\n\nA confusion matrix\n\n\nWe‚Äôll update this page ASAP!"
  },
  {
    "objectID": "01_intro_mobaxterm.html#mobaxterm-for-windows",
    "href": "01_intro_mobaxterm.html#mobaxterm-for-windows",
    "title": "1¬† Introduction to MobaXterm, Terminal, and SSH",
    "section": "1.1 MobaXterm (for Windows)",
    "text": "1.1 MobaXterm (for Windows)\nMobaXterm is a toolbox for remote computing. In a single Windows application, it provides loads of functions that are tailored for programmers, webmasters, IT administrators and pretty much all users who need to handle their remote jobs in a more simple fashion. MobaXterm provides all the important remote network tools, such as SSH, X11, RDP, VNC, FTP, MOSH, and of course, Unix commands, and many more!\n\n\n\nMobaXterm user interface. In the context of remote access through SSH and FTP, mobaXterm provides easy-to-access route as (1) a secure shell (SSH) terminal of the remote server, (2) a list of remote server you‚Äôve accessed, (3) Utilities facilitating remote server access including entertainment, like Swiss army knife!, (4) If you want to reduce redundant typing, just set macro to it, and (5) a files available in the current working directory in the remote server, you can also transfer files from remote server to your local computer using this route!\n\n\nThere are many advantages of having an All-In-One network application for your remote tasks, e.g.¬†when you use SSH to connect to a remote server, a graphical SFTP browser will automatically pop up in order to directly edit your remote files.\nVisit MobaXterm official website to see a demo: https://mobaxterm.mobatek.net/demo.html"
  },
  {
    "objectID": "01_intro_mobaxterm.html#terminal-for-macos",
    "href": "01_intro_mobaxterm.html#terminal-for-macos",
    "title": "1¬† Introduction to MobaXterm, Terminal, and SSH",
    "section": "1.2 Terminal (for macOS)",
    "text": "1.2 Terminal (for macOS)\nTerminal provides a command-line interface to macOS. Each window in Terminal represents an instance of a shell process. The window contains a prompt that indicates you can enter a command. The prompt you see depends on your Terminal and shell settings, but it often includes the name of the host you‚Äôre logged in to, your current working folder, your user name, and a prompt symbol. For example, if a user named michael is using the default zsh shell, the prompt appears as:\nmichael@MacBook-Pro ~ %\nThis indicates that the user named michael is logged in to a computer named MacBook-Pro, and the current folder is his home folder, indicated by the tilde (~).\nMacOS features a built-in SSH client called Terminal which allows you to quickly and easily connect to a server. Starting from open the ‚Äúterminal‚Äù app, and enter the standard SSH command:\nssh user@IPAddress\nThis will connect to the server via SSH with the username `user` and the default SSH port 22. The connection will look similar to the following:"
  },
  {
    "objectID": "01_intro_mobaxterm.html#connecting-to-remote-server",
    "href": "01_intro_mobaxterm.html#connecting-to-remote-server",
    "title": "1¬† Introduction to MobaXterm, Terminal, and SSH",
    "section": "1.3 Connecting to Remote Server",
    "text": "1.3 Connecting to Remote Server\nBioinformatics data processing tasks require more computing power than our laptops, so we need large servers or clusters. It‚Äôs likely you‚Äôll work mostly over a network connection with remote machines on some projects. It can be frustrating for beginners to work with a remote machine. So, This part will introduce you to some commonly used bash commands. To make it easier for beginners to manage their remote machines, there are a range of different tools and technologies available, such as SSH, FTP, and terminal commands, which can be used to access and manage the environment of the machine. Additionally, there are a variety of bash commands which can be used to streamline the process of managing the machine.\nWhat you need to know for connecting to a remove server:\n\nYour username and password in the remote server\nIP address of the remote server, and which port to connect to server\nYou should know whether the remote server accessible via local network or a public IP address\n\nBy default, SSH uses port 22 but it can be changed to a non-standard port. To securely connect the client to the remote server, SSH uses symmetric encryption, asymmetric encryption, and hashing. If you‚Äôre connecting for the first time, you‚Äôll be asked to verify the server‚Äôs public key. Whenever you connect to the same server in the future, the client will reference this verified public key. During an SSH connection, the client and server negotiate a session key used to encrypt and decrypt data.\n\n\n\nIn order to establish a connection, SSH needs to verify SHA keys once connected for the first time. Once authentication is complete, the SSH connection is secure and can be trusted for future access.\n\n\nUpon connecting to the remote server, you‚Äôll see a welcome message like this\n\n\n\nAn example welcome message of server using Ubuntu, including general software and hardware status, information of the latest connection, as well as a prompt for user command."
  },
  {
    "objectID": "02_basic_bash.html#linux-file-systems",
    "href": "02_basic_bash.html#linux-file-systems",
    "title": "2¬† Bash Command Language for Biologists",
    "section": "2.1 Linux File Systems",
    "text": "2.1 Linux File Systems\nIn Unix-like operating systems, the Linux file system defines the directory structure and contents. Even if they‚Äôre located on different physical or virtual hard disks, all files and directories are located under the root directory.\n\n\n\nSchematic hierarchy of Linux file systems. The figure is adopted from https://www.geeksforgeeks.org/linux-file-hierarchy-structure.\n\n\n\nRoot (/)\n\nIt is the root directory of the entire file system hierarchy and the primary hierarchy root. The root directory is where everything begins. This directory can be written only by root.\n\n/bin\n\nEssential commands that must be available with all users, for example, cat, ls, cp, cd, top, mkdir and many more.\n\n/dev\n\nEssential device files such as /dev/null, /dev/shm. This includes terminal devices, USB or other devices connected to the system.\n\n/etc\n\nSystem-wide configuration files for the host, contain files that all programs need. Also included are startup and shutdown shell scripts for starting and stopping individual programs, such as /etc/fstab for permanently mounting external disks, /etc/netplan for configuring the network and IP address, and more.\n\n/home\n\nUsers‚Äô home directories, where they keep their saved files and settings. These directories are used to store all of a user‚Äôs files and settings in one place so that they can easily access their data and keep it organized. For example /home/ponsit, /home/jiratchaya, /home/prasert.\n\n/lib\n\nContain essential libraries for the binaries in /bin/ and /sbin/.\n\n/media\n\nMount points for removable media such as CD-ROMs (deprecated).\n\n/mnt\n\nTemporary mount directory where sysadmins can mount file systems, such as /mnt/external_disk_1, /mnt/removable_drive_1, etc.\n\n/opt\n\nOptional application software packages, including add-on applications from individual vendors.\n\n/sbin\n\nEssential system binaries, e.g., fsck, init, route.\n\n/tmp\n\nTemporary files that aren‚Äôt preserved between reboots and may be severely restricted.\n\n/usr\n\nA secondary hierarchy for read-only user data. Most utilities and applications are located here."
  },
  {
    "objectID": "02_basic_bash.html#basic-bash-commands",
    "href": "02_basic_bash.html#basic-bash-commands",
    "title": "2¬† Bash Command Language for Biologists",
    "section": "2.2 Basic Bash Commands",
    "text": "2.2 Basic Bash Commands\nBash is a Unix shell that allows you to enter commands that are then interpreted and executed by the computer. Commands can be used to perform tasks such as creating a directory, running a program, or deleting a file. Bash is a type of interpreter that takes user input and converts it into a language that the computer can understand and execute. Commands usually consist of keywords, arguments, and flags that allow the user to control how the command is interpreted and executed by the computer.\n\nCreating directories\nKeeping all your files in a single directory makes things much easier for you and your collaborators, and makes it easier to reproduce. Suppose you‚Äôre working on a transcriptome analysis of Cyanophora paradoxa. Your first step would be to choose a short, appropriate project name and create some basic directories.\n\nüóíÔ∏èNote: In Linux file system, directory is exactly the same with folder.\n\nTo keep it short and clear, ‚ÄòCpa‚Äô is used as an alias article name for C. paradoxa, and as the name of the directory, followed by words describing your work, for example.\n\n‚ö†Ô∏è warning: Avoid using spaces ( ) or special characters such as slashes ( / ), backslashes ( \\ ), accented characters ( ' ), tilde ( ~ ), and many others. It is recommended to use underscore ( _ ) or hyphen ( - ) instead of these special characters.\n\n\nCreate a directory name ‚ÄòCpa_RNASeq‚Äô from current working directory\n\nmkdir Cpa_RNASeq\nThis will create a directory named ‚ÄòCpa_RNASeq‚Äô in your current working directory. Let us create some subdirectories!\n\nCreate subdirectory ‚Äò01_Rawdata‚Äô under the ‚ÄòCpa_RNASeq‚Äô directory\n\nmkdir Cpa_RNASeq/01_Rawdata\nThis will create a subdirectory name ‚Äò01_Rawdata‚Äô in the directory ‚ÄòCpa_RNASeq‚Äô\n\nCreate multiple directory at once\n\nFor example, if you want to create 2 directories named ‚Äò02_QC‚Äô and ‚Äò03_adapter_trimming‚Äô under the ‚ÄòCpa_RNASeq‚Äô directory, then simply type\nmkdir Cpa_RNASeq/{02_QC,03_adapter_trimming}\n\n\nNavigating your file system\nThe file system manages the files and directories of the operating system. It organizes our data into files, which store information, and directories. When you see the prompt below on your terminal‚Äôs screen, it means that your terminal has processed the command you entered and is ready for the next command.\njiratchaya@DESKTOP-P2DD13C:~$\njiratchaya is username using this terminal. The address @ symbol followed by DESKTOP-P2DD13C in a computer or server name. And, the dollar sign $ is a prompt, which shows us that the shell is waiting for input. Your shell may use a different character as a prompt and may add information before the prompt.\nIf you want to find out where we are now, type\npwd\npwd stands for print working directory. Without explicit specification, the computer assumes that we want to execute commands in our current working directory. This can be a user‚Äôs home directory (~).\nIf you want to change the directory, e.g.¬†to the ‚ÄòCpa_RNASeq‚Äô directory we just created, just type the following\ncd Cpa_RNASeq\ncd stands for ‚Äúchange directory‚Äù. You can change our working directory by typing cd followed by a directory name. In this case you change from the current directory to the directory named ‚ÄòCpa_RNASeq‚Äô.\n\n\nListing directories\nWe can see what files and subdirectories are in this directory by running ls, which stands for ‚Äúlisting‚Äù:\nls\nExpected result:\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ ls\n01_Rawdata  02_QC  03_adapter_trimming\nLet us look at the other way. This way is to list all the files and directories, including the users who own them, the permissions, and the file size in bytes.\nls -l\nExpected result:\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ ls -l\ntotal 12\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 01_Rawdata\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 02_QC\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 03_adapter_trimming\nList files and folders, permissions and size in a human readable format.\nls -lh\nExpected result:\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ ls -l\ntotal 12\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 01_Rawdata\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 02_QC\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 03_adapter_trimming\nSee all hidden files and directories\nls -la\nExpected result:\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ ls -la\ntotal 20\ndrwxr-xr-x 5 jiratchaya jiratchaya 4096 Mar  1 21:02 .\ndrwxr-x--- 3 jiratchaya jiratchaya 4096 Mar  1 21:02 ..\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 01_Rawdata\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 02_QC\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:02 03_adapter_trimming\n\n\nFiles and directories handling\n\nCreating and editing files\nWhen you work on the command line, you often need to create or edit text files. In this workshop, we recommend using nano as a text editor. Other Unix text editors you may have heard of include vi, vim, emacs, vscode, and many more.\nWe‚Äôll create the file test.fasta. To open an existing file or create a new file, type nano followed by the filename:\nnano test.fasta\nThis will bring up the text editing screen on your terminal. Here you can type anything you want, but in this case we‚Äôll create a sequence like this.\n>seq_01\nTCGCTAGTC\n\n>seq_02\nTAGCGAGTT\n\nüóíÔ∏èNote:Always leave an enter in the last line. This is advantageous if this file is further used by many programmes.\n\n\n\n\nThe text editing screen is displayed once you have typed nano into some files. At the bottom of the window is a list of the most important keyboard shortcuts for the nano editor. All commands are preceded by either a ^ or an M character. The caret symbol (^) stands for the Ctrl key. For example, the commands ^J mean that you press the Ctrl and J keys simultaneously. The letter M stands for the Alt key.\n\n\nTo edit a file, you can use the navigation keys such as arrow keys, End, Home, PgUp or PgDn to control the cursor.\nTo save the changes you made to the file, press Ctrl+o. If the file doesn‚Äôt exist yet, it‚Äôll be created after saving.\nTo exit nano, press Ctrl+x. If there are unsaved changes, you‚Äôll be asked if you want to save the changes. Nano will ask you ‚ÄòSave modified buffer?‚Äô, then type y to confirm the edit.\n\n\nCopying files and directories\nTo copy files and directories the command cp can be used. cp stands for copy and is used to copy files and directories in Linux. An example: You copy the file test.fasta to 01_Rawdata with the following syntax\ncp [source file] [target_directory]/\nFor example\ncp test.fasta 01_Rawdata/\nCopy file to another file, using the syntax\ncp [source_file] [new_file_name]\nFor example\ncp test.fasta test_2.fasta\nYou can copy a file to a new file in the directory by using the following syntax\ncp [source_file] [target_directory]/[new_file_name]\nFor example\ncp test.fasta 01_Rawdata/another_test.fasta\nTo copying directory, use additional flag as follow\ncp -r [source_directory] [new_directory_name]\nThe flag -r stands for recursive, i.e.¬†all files and subdirectories in this directory are copied repeatedly. For example, 01_Rawdata already contains test.fasta, which we copied before, and we want to duplicate this directory.\ncp -r 01_Rawdata/ 01_Rawdata_new\n\n\nMoving files and directories\nTo copy files and directories, the command mv can be used. mv stands for move and is used to move files and directories in Linux. For example, move the file test_2.fasta to the directory 01_Rawdata_new with the following syntax\nmv [file_to_move] [target_directory]\nmv test_2.fasta 01_Rawdata_new/\nSpecifically, to move files and directories, no flags are required as with cp. So if we want to move 01_Rawdata_new to a subdirectory of 01_Rawdata, this can be done as follows\nmv [source_file_or_dir] [target_file_or_dir]\nmv 01_Rawdata_new/ 01_Rawdata\nMoving file within the directory up to the current directory\nmv [source_dir]/[source_file] .\nThe dot ( . ) stands for the current directory, which means you want to move something to the current directory. For example, we want to move the file another_test.fasta, which is in the directory 01_Rawdata, to the current directory by typing\nmv 01_Rawdata/another_test.fasta .\n\n\nDeleting files and directories\nRemoving files and directories can be done with the command rm. rm stands for remove and is used to delete files and directories in Linux. It‚Äôs simple and straightforward with the following syntax.\nrm [file_to_delete]\nFor example, you are deleting file another_test.fasta\nrm another_test.fasta\nTo delete directories, use additional flags\nrm -rf [directory_to_delete]\nThe flag -r means that it does something recursive, which means that it deletes all files and subdirectories of the directory you want to delete. The flag f can help us delete some protected files and directories that you should think twice before deleting.\nFor example you want to delete 03_adapter_trimming directory\nrm -rf 03_adapter_trimming\nOr delete subdirectory 01_Rawdata_new by\nrm -rf 01_Rawdata/01_Rawdata_new\nDon‚Äôt worry~ the 01_Rawdata is still with us\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ ls -l\ntotal 20\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 22:33 01_Rawdata\ndrwxr-xr-x 2 jiratchaya jiratchaya 4096 Mar  1 21:59 02_QC\n-rw-r--r-- 1 jiratchaya jiratchaya   38 Mar  1 22:00 another_test.fasta\n-rw-r--r-- 1 jiratchaya jiratchaya   38 Mar  1 21:59 test.fasta\n-rw-r--r-- 1 jiratchaya jiratchaya   38 Mar  1 22:00 test_2.fasta\n\nüö® Danger zone: Be sure to check the path of the location where you want to delete something with the command rm -rf, otherwise you‚Äôll unintentionally delete necessary files or directories.\n\n\n\n\n\n\n\n\n\nDownloading file from URL\nThere are numerous ways to download a file from a URL via the command line on Linux, and two of the best tools for this task are wget and curl. Both tools have their advantages and disadvantages, depending on the download task at hand. However, in this workshop we‚Äôll mainly focus on downloading with curl.\nFor example, we want to download the latest (draft) genome assembly report of Cyanophora paradoxa from the NCBI genome database via curl as follows.\ncurl -O https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/431/415/GCA_004431415.1_ASM443141v1/GCA_004431415.1_ASM443141v1_assembly_report.txt\nExpected output\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ curl -O https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/431/415/GCA_004431415.1_ASM443141v1/GCA_004431415.1_ASM443141v1_assembly_report.txt\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 61357  100 61357    0     0  21604      0  0:00:02  0:00:02 --:--:-- 21604\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ ls -l\ntotal 80\ndrwxr-xr-x 2 jiratchaya jiratchaya  4096 Mar  1 22:33 01_Rawdata\ndrwxr-xr-x 2 jiratchaya jiratchaya  4096 Mar  1 21:59 02_QC\n-rw-r--r-- 1 jiratchaya jiratchaya 61357 Mar  1 22:56 GCA_004431415.1_ASM443141v1_assembly_report.txt\n-rw-r--r-- 1 jiratchaya jiratchaya    38 Mar  1 22:00 another_test.fasta\n-rw-r--r-- 1 jiratchaya jiratchaya    38 Mar  1 21:59 test.fasta\n-rw-r--r-- 1 jiratchaya jiratchaya    38 Mar  1 22:00 test_2.fasta\nTips: The alternative way to retrieve genome information from NCBI, you can just go to NCBI Genome Data Hub and specify species name to get information. NCBI provides several routes to download files including curl!\n\n\n\nA genome assembly of C. paradoxa in NCBI genome data hub (Accessed: 1 March 2023)\n\n\n\n\nInspecting file\nWe‚Äôll inspect the assembly report file GCA_004431415.1_ASM443141v1_assembly_report.txt that we just downloaded from NCBI\n\nCount how many lines in that file\n\nwc -l GCA_004431415.1_ASM443141v1_assembly_report.txt\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ wc -l GCA_004431415.1_ASM443141v1_assembly_report.txt\n743 GCA_004431415.1_ASM443141v1_assembly_report.txt\n\nPrint some contents at a time.\n\nNow you will see the number of lines that fit on your screen, and you can scroll up and down with the arrow keys. Then press q when you have checked your file.\nless GCA_004431415.1_ASM443141v1_assembly_report.txt\n\n\n\nExample of inspecting a file with the less command. Users can scroll up and down with the arrow keys and exit by pressing q.\n\n\n\nPrint top 10 lines of file\n\nhead GCA_004431415.1_ASM443141v1_assembly_report.txt\n\n\n\nThe first 10 lines of C. paradoxa assembly report file\n\n\n\nPrint bottom 10 lines of file\n\ntail GCA_004431415.1_ASM443141v1_assembly_report.txt\n\n\n\nThe last 10 lines of C. paradoxa assembly report file.\n\n\n\nPrint only lines with a specific pattern of word.\n\nFor example, we‚Äôll print only the lines contain the word ‚ÄúChloroplast‚Äù\ngrep \"Chloroplast\" GCA_004431415.1_ASM443141v1_assembly_report.txt\n\n\n\nExtracted lines with a specific word ‚ÄúChloroplast‚Äù in assembly report file.\n\n\n\n\nShow latest commands we used\nYou can simply press arrow keys up or down to see your latest commands that you typed in the terminal.\nAnother way to see the latest command by typing below in the terminal\nhistory\nHistory is able to keep track of the command lines you use, associate any data with each line, and use information from previous lines when writing new lines.\n\n\nShortcut: Tab Completion\nWhen typing file or directory names, it‚Äôs easy to mistype. Instead, we can use ‚Äòtab‚Äô to complete what we want to type. The shell will try to fill in the rest of a directory or file name if you press tab after typing.\n\n\n\nUsing tab autocomplete in bash."
  },
  {
    "objectID": "02_basic_bash.html#maintaining-long-running-jobs-with-tmux",
    "href": "02_basic_bash.html#maintaining-long-running-jobs-with-tmux",
    "title": "2¬† Bash Command Language for Biologists",
    "section": "2.3 Maintaining Long-Running Jobs with tmux",
    "text": "2.3 Maintaining Long-Running Jobs with tmux\nWhen we run programs through the Unix shell, they run until they terminate successfully or are terminated with an error. Multiple processes running simultaneously on your computer, such as system files, web browser, email application, bioinformatics programs, and so on. In bioinformatics, we often work with processes that run for a long period of time. Therefore, it‚Äôs important that we know how to work with processes and manage them using the Unix shell. In this section, we‚Äôll learn the basics of dealing with processes.\nIn addition, processes are also terminated if the connection to the servers is interrupted, the network connection drops immediately, or the power fails. Since we‚Äôre constantly working with remote computers in our daily work in bioinformatics, we need a way to prevent the accidental termination of long-running applications. Leaving the local terminal‚Äôs connection to a remote computer open while a program is running is an unsafe solution, even the most reliable networks can experience short outages.\n\n\n\nHow tmux increase you pruductivity :/\n\n\nSome software offers the user the possibility to run their work as a background process, e.g.¬†Nohup, Screen and Tmux. In this workshop, we propose Terminal Multiplexer (Tmux), which allows you to create a session with multiple windows, each of which can run its own processes. The Tmux sessions are persistent, which means that all the windows and their processes can be easily restored by reattaching the session.\nWhen Tmux is running on a remote machine, you can maintain a persistent session that isn‚Äôt lost when the connection drops or you close your terminal window to go home (or even exit your terminal programme). Rather, all Tmux sessions can be reattached to the terminal you‚Äôre currently at - simply log back into the remote machine via SSH and reattach the Tmux session. All windows remain undisturbed and all processes continue to run.\n\nA simple usage of Tmux\nOpen a terminal and use the following command\ntmux\nYou see a command prompt as usual, but you now see a taskbar-style menu at the bottom of the terminal that contains something like bash 0 *. The asterisk indicates that this is your active window.\n\n\n\nTmux windows\n\n\n\n\nDetach a session\nThis allows you to leave the tmux session, but it continues to run in the background. Just press the key\n[ctrl + b] + d\nYour terminal will print\njiratchaya@DESKTOP-P2DD13C:~/Cpa_RNASeq$ tmux\n[detached (from session 0)]\nThis should take you back to a standard prompt. Remember that the Tmux session continues in the background, and you can recall it at any time.\n\n\n2.3.1 Name the Tmux session\nYou may find it helpful to name your sessions with meaningful titles to keep things organized. Let‚Äôs try naming your first session with Tmux.\nYou can name it anything that we want, but in this case I will name it ‚Äòprocess2‚Äô. Enter the following command:\ntmux new -s process2\nYou should now have a new Tmux session running. If you look in the lower left area of the window, you will see the name of your session rather than the generic ‚Äòbash‚Äô.\n\n\nList tmux sessions\nWhat happened to your session? It is still running in the background. You can reopen the session by name or number ID, but what if you forgot the session name?\nThere is a list function built into tmux:\ntmux ls\nThis lists all your current tmux sessions. When you run it, you get output like this:\n\n\n\nList of running tmux sessions.\n\n\n\n\nReenter (aka reattach) a session in Tmux\nTo reopen your tmux session, you can use the tmux command with the attach or attach-session option as follows:\ntmux a -t [session_name]\nFor example, we‚Äôll reenter to the process2 session.\ntmux a -t process2\n\n\nExit tmux when finish running\nQuitting tmux is exactly the same as quitting the standard terminal by pressing the keys Ctrl+d or by entering\nexit"
  },
  {
    "objectID": "02_basic_bash.html#resources",
    "href": "02_basic_bash.html#resources",
    "title": "2¬† Bash Command Language for Biologists",
    "section": "2.4 Resources",
    "text": "2.4 Resources\n\nBuffalo, V. (2015). Bioinformatics data skills: Reproducible and robust research with open source tools. ‚Äù O‚ÄôReilly Media, Inc.‚Äù.\nIntroduction to the command line interface by Harvard Chan Bioinformatics Core (Accessed on 27 Feb 2023).\nIntroducing the Shell, from the course Introduction to the Command Line for Genomics in bioinformatics-core-shared-training (Accessed on 28 Feb 2023)\nBash cheat sheet from RehanSaeed GitHub repository (Accessed on 1 March 2023).\nGetting Started with Tmux [Beginner‚Äôs Guide]. By linuxhandbook.com (Accessed on 2 March 2023)"
  }
]