[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Transcriptome Data Analysis in Non-model Organisms",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "01_intro_mobaxterm.html#mobaxterm-for-windows",
    "href": "01_intro_mobaxterm.html#mobaxterm-for-windows",
    "title": "1  Introduction to MobaXterm, Terminal, and SSH",
    "section": "1.1 MobaXterm (for Windows)",
    "text": "1.1 MobaXterm (for Windows)\nMobaXterm is a toolbox for remote computing. In a single Windows application, it provides loads of functions that are tailored for programmers, webmasters, IT administrators and pretty much all users who need to handle their remote jobs in a more simple fashion. MobaXterm provides all the important remote network tools, such as SSH, X11, RDP, VNC, FTP, MOSH, and of course, Unix commands, and many more!\n\n\n\nMobaXterm user interface. In the context of remote access through SSH and FTP, mobaXterm provides easy-to-access route as (1) a secure shell (SSH) terminal of the remote server, (2) a list of remote server you’ve accessed, (3) Utilities facilitating remote server access including entertainment, like Swiss army knife!, (4) If you want to reduce redundant typing, just set macro to it, and (5) a files available in the current working directory in the remote server, you can also transfer files from remote server to your local computer using this route!\n\n\nThere are many advantages of having an All-In-One network application for your remote tasks, e.g. when you use SSH to connect to a remote server, a graphical SFTP browser will automatically pop up in order to directly edit your remote files.\nVisit MobaXterm official website to see a demo: https://mobaxterm.mobatek.net/demo.html"
  },
  {
    "objectID": "01_intro_mobaxterm.html#terminal-for-macos",
    "href": "01_intro_mobaxterm.html#terminal-for-macos",
    "title": "1  Introduction to MobaXterm, Terminal, and SSH",
    "section": "1.2 Terminal (for macOS)",
    "text": "1.2 Terminal (for macOS)\nTerminal provides a command-line interface to macOS. Each window in Terminal represents an instance of a shell process. The window contains a prompt that indicates you can enter a command. The prompt you see depends on your Terminal and shell settings, but it often includes the name of the host you’re logged in to, your current working folder, your user name, and a prompt symbol. For example, if a user named michael is using the default zsh shell, the prompt appears as:\nmichael@MacBook-Pro ~ %\nThis indicates that the user named michael is logged in to a computer named MacBook-Pro, and the current folder is his home folder, indicated by the tilde (~).\nMacOS features a built-in SSH client called Terminal which allows you to quickly and easily connect to a server. Starting from open the “terminal” app, and enter the standard SSH command:\nssh user@IPAddress\nThis will connect to the server via SSH with the username `user` and the default SSH port 22. The connection will look similar to the following:"
  },
  {
    "objectID": "01_intro_mobaxterm.html#connecting-to-remote-server",
    "href": "01_intro_mobaxterm.html#connecting-to-remote-server",
    "title": "1  Introduction to MobaXterm, Terminal, and SSH",
    "section": "1.3 Connecting to Remote Server",
    "text": "1.3 Connecting to Remote Server\nBioinformatics data processing tasks require more computing power than our laptops, so we need large servers or clusters. It’s likely you’ll work mostly over a network connection with remote machines on some projects. It can be frustrating for beginners to work with a remote machine. So, This part will introduce you to some commonly used bash commands. To make it easier for beginners to manage their remote machines, there are a range of different tools and technologies available, such as SSH, FTP, and terminal commands, which can be used to access and manage the environment of the machine. Additionally, there are a variety of bash commands which can be used to streamline the process of managing the machine.\nWhat you need to know for connecting to a remove server:\n\nYour username and password in the remote server\nIP address of the remote server, and which port to connect to server\nYou should know whether the remote server accessible via local network or a public IP address\n\nBy default, SSH uses port 22 but it can be changed to a non-standard port. To securely connect the client to the remote server, SSH uses symmetric encryption, asymmetric encryption, and hashing. If you’re connecting for the first time, you’ll be asked to verify the server’s public key. Whenever you connect to the same server in the future, the client will reference this verified public key. During an SSH connection, the client and server negotiate a session key used to encrypt and decrypt data.\n\n\n\nIn order to establish a connection, SSH needs to verify SHA keys once connected for the first time. Once authentication is complete, the SSH connection is secure and can be trusted for future access.\n\n\nUpon connecting to the remote server, you’ll see a welcome message like this\n\n\n\nAn example welcome message of server using Ubuntu, including general software and hardware status, information of the latest connection, as well as a prompt for user command."
  },
  {
    "objectID": "02_basic_bash.html#linux-file-systems",
    "href": "02_basic_bash.html#linux-file-systems",
    "title": "2  Bash Command Language for Biologists",
    "section": "2.1 Linux File Systems",
    "text": "2.1 Linux File Systems\nAdopted from linux-file-hierarchy-structure, In Unix-like operating systems, the Linux File System defines the directory structure and contents. Even if they’re on different physical or virtual disks, all files and directories are under the root directory.\n\n\n\nSchematic hierarchy of Linux file systems. The figure is adopted from https://www.geeksforgeeks.org/linux-file-hierarchy-structure.\n\n\n\nRoot (/)\n\nIt is the root directory of the entire file system hierarchy and the primary hierarchy root. The root directory is where everything starts. This directory can only be written by root.\n\n/bin\n\nEssential commands that need to be available in all users, for example, cat, ls, cp, cd, top, mkdir and many more.\n\n/dev\n\nEssential device files such as /dev/null, /dev/shm. These include terminal devices, usb, or any device attached to the system.\n\n/etc\n\nSystem-wide configuration files for the host, contain files all programs need. Also included are startup and shutdown shell scripts for starting and stopping individual programs, such as /etc/fstab for permanently mounting external disks, /etc/netplan for configuring the network and IP address, and more.\n\n/home\n\nThe home directories of users, where they keep their saved files and settings. These directories are used to store all of a user’s files and settings in one place, making it easy for them to access their data and keep it organized. For example /home/ponsit, /home/jiratchaya, /home/prasert.\n\n/lib\n\nContain essential libraries for the binaries in /bin/ and /sbin/.\n\n/media\n\nMount points for removable media such as CD-ROMs (deprecated).\n\n/mnt\n\nTemporary mount directory where sysadmins can mount file systems, such as /mnt/external_disk_1, /mnt/removable_drive_1, etc.\n\n/opt\n\nOptional application software packages. Contains add-on applications from individual vendors.\n\n/sbin\n\nEssential system binaries, e.g., fsck, init, route.\n\n/tmp\n\nTemporary files that aren’t preserved between reboots, and may be severely limited.\n\n/usr\n\nA secondary hierarchy for read-only user data. The majority of utilities and apps are in here."
  },
  {
    "objectID": "02_basic_bash.html#basic-bash-commands",
    "href": "02_basic_bash.html#basic-bash-commands",
    "title": "2  Bash Command Language for Biologists",
    "section": "2.2 Basic Bash Commands",
    "text": "2.2 Basic Bash Commands\nBash is a Unix shell that allows you to enter commands, which are then interpreted and run by the computer. Commands can be used to perform tasks, such as creating a directory, running a program, or deleting a file. Bash is a type of interpreter, which takes user input and converts it into a language that the computer can understand and execute. Commands are typically composed of keywords, arguments, and flags, which allow the user to control how the command is interpreted and executed by the computer.\n\nNavigating your file system\n\nThe file system manages files and directories in the operating system, as shown in the diagram above. It organizes our data into files, which store information, and directories.\njiratchaya@pslab1:~$\nThe dollar sign $ is a prompt, which shows us that the shell is waiting for input. Your shell may use a different character as a prompt and may add information before the prompt.\n\nFind out where we are now\n\n\npwd\npwd stand for print working directory. Without explicitly specifying something else, the computer assumes we want to run commands in our current working directory. Which can be a user’s home directory (~).\n\nChanging directory\n\n\ncd your_target_directory\nWhich stands for change directory. You can change our working directory by typing cd followed by a directory name. In this case, you care changing from the current directory to the directory named your_target_directory.\n\nListing directories\n\nWe can see files and subdirectories are in this directory by running ls, which stands for “listing”:\nls\nLet’s see in the different way. This way is to list all files and directories including user who belong to, permissions, and file size in bytes.\nls -l\nTo list files and folders, permissions, and size in human-readable format.\nls -lh\nSee all hidden files and directories\nls -a\n# or\nls -la"
  },
  {
    "objectID": "02_basic_bash.html#resources",
    "href": "02_basic_bash.html#resources",
    "title": "2  Bash Command Language for Biologists",
    "section": "2.3 Resources",
    "text": "2.3 Resources\n\nIntroduction to the command line interface by Harvard Chan Bioinformatics Core (HBC) .\nIntroducing the Shell, from the course Introduction to the Command Line for Genomics in bioinformatics-core-shared-training"
  }
]